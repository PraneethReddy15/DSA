Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4
------------------------------------------------
import java.util.*;

class Solution {
    public int searchInsert(int[] nums, int target) {
        List<Integer> a = new ArrayList<>();

        for (int i = 0; i < nums.length; i++) {
            a.add(new Integer(nums[i]));
        }

        int low = 0;
        int high = nums.length - 1;
        int ans = 0;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        // If the target is not found, insert it at the correct position
        a.add(low, target);

        return low;
    }
}
------------------------------------------------------------
import java.util.*;   
class Solution {
    public int searchInsert(int[] nums, int target) 
    {
        List<Integer> a= new ArrayList<>();
        for(int i=0;i<nums.length;i++)
        {
          a.add(new Integer(nums[i])); 
        }
        int ans=0;
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]==target)
            {
                ans=i;
                break;
            }
            else
            {
                a.add(target);
                a.sort(Comparator.naturalOrder());
                ans=a.indexOf(target);  
            }
        }
        return ans;
        }
    }
