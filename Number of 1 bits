Write a function that takes the binary representation of an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).
 
Example 1:

Input: n = 00000000000000000000000000001011
Output: 3
Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.

Example 2:

Input: n = 00000000000000000000000010000000
Output: 1
Explanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.

Example 3:

Input: n = 11111111111111111111111111111101
Output: 31
Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.
-------------------------------------------------------------------------------------------------------------------------------
public class Solution {
    // you need to treat n as an unsigned value
     public int hammingWeight(int n) {
        int ans=0;

        // TC => O(n) , where n is a binary string of length 32.
        while(n!=0){
            if((n&1)==1){
                ans++;
            }
            //n = n>>1;  //if use this you will get TLE Error 
			n = n>>>1;
        }
        return ans;
    }
}
